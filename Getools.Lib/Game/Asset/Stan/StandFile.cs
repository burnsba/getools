using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Getools.Lib.Game.Asset.Stan
{
    public class StandFile
    {
        public StandFile()
        {
        }

        public StandFileHeader Header { get; set; }
        public List<StandTile> Tiles { get; set; } = new List<StandTile>();
        public StandFileFooter Footer { get; set; }
        public BetaFooter BetaFooter { get; set; } = null;

        internal void WriteToCFile(StreamWriter sw)
        {
            sw.WriteLine("/*");

            foreach (var prefix in Config.COutputPrefix)
            {
                sw.WriteLine($"* {prefix}");
            }

            sw.WriteLine($"* {DateTime.Now.ToLongDateString()} {DateTime.Now.ToLongTimeString()}");

            var assemblyInfo = Utility.GetAutoGeneratedAssemblyVersion();

            sw.WriteLine($"* {assemblyInfo}");
            sw.WriteLine("*/");
            sw.WriteLine();

            foreach (var filename in Config.Stan.IncludeHeaders)
            {
                sw.WriteLine($"#include \"{filename}\"");
            }

            sw.WriteLine();

            sw.Write(Header.ToCDeclaration());
            sw.WriteLine();

            var count = Tiles.Count();

            foreach (var tile in Tiles)
            {
                sw.Write(tile.ToCDeclaration());
                sw.WriteLine();
            }

            sw.WriteLine();

            sw.Write(Footer.ToCDeclaration());
            sw.WriteLine();
            sw.WriteLine();
        }

        internal void WriteToBetaCFile(StreamWriter sw)
        {
            sw.WriteLine("/*");

            foreach (var prefix in Config.COutputPrefix)
            {
                sw.WriteLine($"* {prefix}");
            }

            sw.WriteLine($"* {DateTime.Now.ToLongDateString()} {DateTime.Now.ToLongTimeString()}");

            var assemblyInfo = Utility.GetAutoGeneratedAssemblyVersion();

            sw.WriteLine($"* {assemblyInfo}");
            sw.WriteLine("*/");
            sw.WriteLine();

            foreach (var filename in Config.Stan.IncludeHeaders)
            {
                sw.WriteLine($"#include \"{filename}\"");
            }

            sw.WriteLine();

            sw.Write(Header.ToBetaCDeclaration());
            sw.WriteLine();

            var count = Tiles.Count();

            foreach (var tile in Tiles)
            {
                sw.Write(tile.ToBetaCDeclaration());
                sw.WriteLine();
            }

            sw.WriteLine();

            sw.Write(Footer.ToBetaCDeclaration());
            sw.WriteLine();

            sw.Write(BetaFooter.ToBetaCDeclaration());
            sw.WriteLine();
            sw.WriteLine();
        }

        internal void WriteToBinFile(BinaryWriter bw)
        {
            Header.AppendToBinaryStream(bw);

            foreach (var tile in Tiles)
            {
                tile.AppendToBinaryStream(bw);
            }

            Footer.AppendToBinaryStream(bw);
        }

        internal void WriteToBetaBinFile(BinaryWriter bw)
        {
            Header.BetaAppendToBinaryStream(bw);

            foreach (var tile in Tiles)
            {
                tile.BetaAppendToBinaryStream(bw);
            }

            Footer.BetaAppendToBinaryStream(bw);
            BetaFooter.BetaAppendToBinaryStream(bw);
        }
    }
}
