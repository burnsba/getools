using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Getools.Lib.Game.Asset.Stan
{
    public class StandFile
    {
        public StandFile()
        {
        }

        public StandFileHeader Header { get; set; }
        public List<StandTile> Tiles { get; set; } = new List<StandTile>();
        public StandFileFooter Footer { get; set; }
        public BetaFooter BetaFooter { get; set; } = null;

        internal void WriteToCFile(StreamWriter sw)
        {
            throw new NotImplementedException();
            //StandFileTile tile = null;
            //StandFilePointList pointList = null;

            //sw.WriteLine("/*");

            //foreach (var prefix in Config.COutputPrefix)
            //{
            //    sw.WriteLine($"* {prefix}");
            //}

            //sw.WriteLine($"* {DateTime.Now.ToLongDateString()} {DateTime.Now.ToLongTimeString()}");

            //var assemblyInfo = Utility.GetAutoGeneratedAssemblyVersion();

            //sw.WriteLine($"* {assemblyInfo}");
            //sw.WriteLine("*/");
            //sw.WriteLine();

            //foreach (var filename in Config.Stan.IncludeHeaders)
            //{
            //    sw.WriteLine($"#include \"{filename}\"");
            //}

            //sw.WriteLine();

            //sw.Write(Header.ToCDeclaration());
            //sw.WriteLine();

            //var count = Tiles.Count();

            //if (PointLists.Count() != count)
            //{
            //    throw new InvalidOperationException($"Number of tiles ({count}) does not match number of points lists ({PointLists.Count()})");
            //}

            //for (int i = 0; i < count; i++)
            //{
            //    tile = Tiles[i];
            //    pointList = PointLists[i];

            //    if (tile.OrderId != pointList.OrderId)
            //    {
            //        pointList = PointLists.FirstOrDefault(x => x.OrderId == tile.OrderId);

            //        if (object.ReferenceEquals(null, pointList))
            //        {
            //            throw new InvalidOperationException($"Could not fine a point list to go with tile \"{tile.Name}\". The part after the underscore in the name should be the same for both.");
            //        }
            //    }

            //    sw.Write(tile.ToCDeclaration());
            //    sw.Write(pointList.ToCDeclaration());
            //    sw.WriteLine();
            //}

            //sw.Write(Footer.ToCDeclaration());
            //sw.WriteLine();
            //sw.WriteLine();
        }

        internal void WriteToBinFile(BinaryWriter bw)
        {
            Header.AppendToBinaryStream(bw);

            foreach (var tile in Tiles)
            {
                tile.AppendToBinaryStream(bw);
            }

            Footer.AppendToBinaryStream(bw);
        }
    }
}
